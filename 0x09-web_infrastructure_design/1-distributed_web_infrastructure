https://imgur.com/a/YDZKsK2

Infrastructure Design:

Servers:

1.Web Server (Nginx):
	Purpose: Serves as the front-end web server handling HTTP requests.
	Configuration: Installed and configured to serve static content and act as a reverse proxy to the application server.
2.Application Server:
	Purpose: Hosts the application code and processes dynamic content.
	Configuration: Runs the application code (e.g., Python, Node.js) and communicates with the database server.

Load Balancer (HAproxy):
	Purpose:Distributes incoming web traffic across multiple servers to ensure high availability and load balancing.

Distribution Algorithm:
	Configured with a round-robin algorithm to evenly distribute requests among the available servers.

Application Files:
	Purpose:Contains the codebase and assets required to run the www.foobar.com website.

Database (MySQL):
	Purpose:Stores and manages the website's data.

Primary-Replica Cluster:
	Configured as a Primary-Replica (Master-Slave) cluster for high availability and fault tolerance.

Explanation:
Additional Elements:
	Load Balancer (HAproxy): Added for distributing incoming traffic among multiple servers, improving performance and availability.
	Database (MySQL): Added for data storage and retrieval.

Load Balancer Configuration:

Distribution Algorithm:
Configured with a round-robin algorithm to distribute requests equally among the servers.
Active-Active vs. Active-Passive:

Active-Active:
All servers actively handle traffic simultaneously.
Active-Passive:
One server handles traffic actively, while others remain on standby until needed.
Database Primary-Replica Cluster:

How it Works:
Primary node receives write and read requests, replicating data to Replica nodes.
Replica nodes handle read requests, improving scalability and fault tolerance.
Primary Node vs. Replica Node:
Primary handles write operations and coordinates data replication.
Replica nodes serve read operations, providing redundancy and scalability.
Issues:
Single Points of Failure (SPOF):

Web Server or Application Server:
If one server fails, the website may become unavailable.
Load Balancer:
If the load balancer fails, traffic distribution is disrupted.
Database Primary Node:
If the primary database node fails, write operations are affected.
Security Issues:

No Firewall:
Lack of firewall exposes servers to potential unauthorized access.
No HTTPS:
Lack of HTTPS encryption exposes data transmission to potential interception.
No Monitoring:

Monitoring Absence:
No monitoring tools are in place to detect and address performance issues or potential failures.
Recommendations for Improvement:
High Availability:

Implement redundant load balancers and web/application servers for increased availability.
Utilize a cloud-based solution with auto-scaling capabilities.
Security Measures:

Implement firewalls on servers to control incoming and outgoing traffic.
Enable HTTPS for secure data transmission.
Monitoring:

Implement monitoring tools for real-time tracking of server performance and potential issues.
Set up alerts for immediate response to critical events.
